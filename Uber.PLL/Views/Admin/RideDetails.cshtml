@model Uber.DAL.Entities.Ride
@{
    ViewData["Title"] = "Ride Details";
}

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
    }

    .header {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        color: white;
        padding: 20px 0;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        border-radius: 15px;
        margin-bottom: 30px;
    }

    .header-content {
        text-align: center;
        padding: 0 20px;
    }

    .header h1 {
        font-size: 28px;
        font-weight: 600;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .header-nav {
        margin-top: 15px;
    }

    .header-nav a {
        color: white;
        text-decoration: none;
        margin: 0 15px;
        font-weight: 500;
        transition: all 0.3s ease;
        padding: 8px 16px;
        border-radius: 20px;
        display: inline-block;
    }

    .header-nav a:hover {
        background: rgba(255,255,255,0.2);
        transform: translateY(-2px);
    }

    .details-container {
        max-width: 1000px;
        margin: 0 auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 15px 35px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .details-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        text-align: center;
    }

    .details-header h2 {
        font-size: 24px;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .details-header p {
        opacity: 0.9;
        font-size: 16px;
    }

    .details-body {
        padding: 40px;
    }

    .details-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 30px;
        margin-bottom: 30px;
    }

    .detail-section {
        background: #f8f9fa;
        padding: 25px;
        border-radius: 15px;
        border: 2px solid #e9ecef;
    }

    .detail-section h3 {
        color: #2c3e50;
        margin-bottom: 20px;
        font-size: 18px;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .detail-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 0;
        border-bottom: 1px solid #e9ecef;
    }

    .detail-item:last-child {
        border-bottom: none;
    }

    .detail-label {
        font-weight: 600;
        color: #495057;
        font-size: 14px;
    }

    .detail-value {
        color: #2c3e50;
        font-size: 14px;
        text-align: right;
        max-width: 200px;
    }

    .status-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-align: center;
        white-space: nowrap;
    }

    .status-pending {
        background: #fff3cd;
        color: #856404;
    }

    .status-accepted {
        background: #d1ecf1;
        color: #0c5460;
    }

    .status-rejected {
        background: #f8d7da;
        color: #721c24;
    }

    .status-cancelled {
        background: #f8d7da;
        color: #721c24;
    }

    .status-inprogress {
        background: #d4edda;
        color: #155724;
    }

    .status-completed {
        background: #d1ecf1;
        color: #0c5460;
    }

    .participant-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        border: 2px solid #e9ecef;
        text-align: center;
    }

    .participant-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        margin: 0 auto 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 700;
        font-size: 24px;
    }

    .participant.driver .participant-avatar {
        background: #28a745;
    }

    .participant.rider .participant-avatar {
        background: #17a2b8;
    }

    .participant-name {
        font-size: 18px;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 8px;
    }

    .participant-role {
        color: #6c757d;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 10px;
    }

    .participant-contact {
        color: #495057;
        font-size: 14px;
    }

    .location-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        border: 2px solid #e9ecef;
        text-align: center;
    }

    .location-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin: 0 auto 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 24px;
    }

    .location.pickup .location-icon {
        background: #28a745;
    }

    .location.dropoff .location-icon {
        background: #dc3545;
    }

    .location-label {
        font-size: 16px;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 10px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .location-coords {
        color: #6c757d;
        font-size: 14px;
        font-family: 'Courier New', monospace;
        background: #f8f9fa;
        padding: 8px 12px;
        border-radius: 6px;
        margin-bottom: 10px;
    }

    .actions {
        display: flex;
        gap: 20px;
        justify-content: center;
        margin-top: 30px;
        padding-top: 30px;
        border-top: 2px solid #e9ecef;
    }

    .btn {
        padding: 15px 30px;
        border: none;
        border-radius: 12px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        min-width: 140px;
        justify-content: center;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #5a6268;
        transform: translateY(-2px);
    }

    .btn-danger {
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        color: white;
    }

    .btn-danger:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(220, 53, 69, 0.3);
    }

    .alert {
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 25px;
        font-weight: 500;
        border: 1px solid;
    }

    .alert-success {
        background: #d4edda;
        color: #155724;
        border-color: #c3e6cb;
    }

    .alert-danger {
        background: #f8d7da;
        color: #721c24;
        border-color: #f5c6cb;
    }

    media (max-width: 768px) {
        .details-grid {
            grid-template-columns: 1fr;
        }

        .actions {
            flex-direction: column;
        }

        .btn {
            width: 100%;
        }

        .details-container {
            margin: 0 10px;
        }

        .details-body {
            padding: 25px;
        }
    }
</style>

<div class="header">
    <div class="header-content">
        <h1>üöó Uber Admin Dashboard</h1>
        <div class="header-nav">
            <a asp-controller="Admin" asp-action="AdminDashBoard">Dashboard</a>
            <a asp-controller="Admin" asp-action="Admin_Drivers">Drivers</a>
            <a asp-controller="Admin" asp-action="Admin_Riders">Riders</a>
            <a asp-controller="Admin" asp-action="Admin_Rides">Rides</a>
            <a asp-controller="Admin" asp-action="Admin_Admines">Admins</a>
        </div>
    </div>
</div>

<div class="details-container">
    <div class="details-header">
        <h2>üöó Ride Details</h2>
        <p>Comprehensive information about ride #@Model.Id</p>
    </div>

    <div class="details-body">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                ‚úÖ @TempData["SuccessMessage"]
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                ‚ùå @TempData["ErrorMessage"]
            </div>
        }

        <div class="details-grid">
            <div class="detail-section">
                <h3>üìä Ride Information</h3>
                <div class="detail-item">
                    <span class="detail-label">Ride ID:</span>
                    <span class="detail-value">#@Model.Id</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Status:</span>
                    <span class="detail-value">
                        <span class="status-badge status-@Model.Status.ToString().ToLower()">
                            @Model.Status.ToString()
                        </span>
                    </span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Created:</span>
                    <span class="detail-value">@Model.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Duration:</span>
                    <span class="detail-value">
                        @if (Model.Status == Uber.DAL.Enums.RideStatus.Completed)
                        {
                            <span>~30 minutes</span>
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Fare:</span>
                    <span class="detail-value">
                        @if (Model.Status == Uber.DAL.Enums.RideStatus.Completed)
                        {
                            <span style="color: #28a745; font-weight: 600;">
                                $@(CalculateFare(Model.StartLat, Model.StartLng, Model.EndLat, Model.EndLng).ToString("F2"))
                            </span>
                        }
                        else
                        {
                            <span style="color: #6c757d; font-style: italic;">Pending</span>
                        }
                    </span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Rating:</span>
                    <span class="detail-value">
                        @* @if (Model.Rate.HasValue)
                        {
                            <span style="color: #f39c12; font-weight: 600;">@Model.Rate/5 ‚≠ê</span>
                        }
                        else
                        {
                            <span style="color: #6c757d; font-style: italic;">No rating</span>
                        } *@
                    </span>
                </div>
            </div>

            <div class="detail-section">
                <h3>üë• Participants</h3>
                @if (Model.Driver != null)
                {
                    <div class="participant-card participant driver">
                        <div class="participant-avatar">D</div>
                        <div class="participant-name">@Model.Driver.Name</div>
                        <div class="participant-role">Driver</div>
                        <div class="participant-contact">@Model.Driver.PhoneNumber</div>
                        <div class="participant-contact">@Model.Driver.Email</div>
                    </div>
                }
                @if (Model.User != null)
                {
                    <div class="participant-card participant rider">
                        <div class="participant-avatar">R</div>
                        <div class="participant-name">@Model.User.Name</div>
                        <div class="participant-role">Rider</div>
                        <div class="participant-contact">@Model.User.PhoneNumber</div>
                        <div class="participant-contact">@Model.User.Email</div>
                    </div>
                }
            </div>

            <div class="detail-section">
                <h3>üìç Locations</h3>
                <div class="location-card location pickup">
                    <div class="location-icon">üìç</div>
                    <div class="location-label">Pickup Location</div>
                    <div class="location-coords">@Model.StartLat.ToString("F6"), @Model.StartLng.ToString("F6")</div>
                    <div style="color: #6c757d; font-size: 12px;">Start coordinates</div>
                </div>
                <div class="location-card location dropoff">
                    <div class="location-icon">üéØ</div>
                    <div class="location-label">Drop-off Location</div>
                    <div class="location-coords">@Model.EndLat.ToString("F6"), @Model.EndLng.ToString("F6")</div>
                    <div style="color: #6c757d; font-size: 12px;">End coordinates</div>
                </div>
            </div>
        </div>

        <div class="actions">
            <a asp-controller="Admin" asp-action="Admin_Rides" class="btn btn-secondary">
                ‚Ü©Ô∏è Back to Rides
            </a>
            @if (Model.Status == Uber.DAL.Enums.RideStatus.Pending || Model.Status == Uber.DAL.Enums.RideStatus.Accepted)
            {
                <form method="post" action="@Url.Action("CancelRide", "Admin")" style="display: inline;">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to cancel this ride?')">
                        ‚ùå Cancel Ride
                    </button>
                </form>
            }
        </div>
    </div>
</div>

@functions {
    private double CalculateFare(double startLat, double startLng, double endLat, double endLng)
    {
        // Simple distance calculation using Haversine formula
        const double R = 6371; // Earth's radius in kilometers
        
        var lat1 = startLat * Math.PI / 180;
        var lat2 = endLat * Math.PI / 180;
        var deltaLat = (endLat - startLat) * Math.PI / 180;
        var deltaLng = (endLng - startLng) * Math.PI / 180;
        
        var a = Math.Sin(deltaLat / 2) * Math.Sin(deltaLat / 2) +
                Math.Cos(lat1) * Math.Cos(lat2) *
                Math.Sin(deltaLng / 2) * Math.Sin(deltaLng / 2);
        
        var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        var distance = R * c;
        
        // Base fare: $2.50 + $1.50 per km
        return 2.50 + (distance * 1.50);
    }
}
