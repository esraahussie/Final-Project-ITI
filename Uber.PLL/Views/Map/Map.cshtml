@{
    ViewData["Title"] = "Home";
}

<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<style>
    body {
        font-family: 'Inter', sans-serif;
        background: #fff;
        color: #000;
        margin: 0;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    header {
        background: #000;
        color: #fff;
        padding: 20px 50px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .nav-left {
        display: flex;
        align-items: center;
        gap: 30px;
    }

    .nav-right a {
        color: #fff;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s ease;
    }

        .nav-right a:hover {
            color: #1CB5A3;
        }

    .nav-right .signup-btn {
        background: #fff;
        color: #000;
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: bold;
        transition: background 0.3s ease, color 0.3s ease;
    }

        .nav-right .signup-btn:hover {
            background: #1CB5A3;
            color: #fff;
        }

    .main {
        display: flex;
        justify-content: space-between;
        padding: 50px;
        gap: 40px;
        flex-wrap: wrap;
    }

    .form-section {
        max-width: 400px;
    }

        .form-section h1 {
            font-size: 40px;
            margin-bottom: 30px;
        }

        .form-section input, .form-section select, .form-section button {
            width: 100%;
            padding: 12px;
            margin-bottom: 15px;
            border-radius: 8px;
            border: 1px solid #ccc;
            font-size: 16px;
        }

        .form-section button {
            background: #000;
            color: #fff;
            border: none;
            cursor: pointer;
            transition: background 0.3s ease;
        }

            .form-section button:hover {
                background: #1CB5A3;
            }

    .about-us {
        background-color: #000;
        color: #fff;
        padding: 20px 30px;
        text-align: center;
        width: 100%;
        margin-top: auto;
        font-size: 0.85rem;
    }

        .about-us h2 {
            font-size: 18px;
            margin-bottom: 10px;
        }

        .about-us p {
            font-size: 14px;
            line-height: 1.4;
            margin-bottom: 15px;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }

    .social-icons {
        display: flex;
        justify-content: center;
        gap: 15px;
        flex-wrap: wrap;
    }

        .social-icons a img {
            width: 25px;
            height: 25px;
            filter: brightness(0) invert(1);
            transition: filter 0.3s ease;
        }

        .social-icons a:hover img {
            filter: brightness(0) invert(0.6);
        }

    #map {
        width: 500px;
        height: 500px;
        max-width: 100%;
        border-radius: 10px;
    }
</style>

<header>
    <div class="nav-left">
        <h1>Uber</h1>
    </div>
    <div class="nav-right">
        <a asp-controller="Account" asp-action="ChooseLoginType">Log in</a>
        <a asp-controller="Account" asp-action="ChooseRegisterType" class="signup-btn">Sign up</a>
    </div>
</header>

<div class="main">
    <div class="form-section">
        <h1>Go anywhere with Uber</h1>
        <form id="rideForm">
            <input type="text" id="pickup" placeholder="Pickup location" required>
            <input type="text" id="dropoff" placeholder="Dropoff location" required>
            <input type="date" name="date" required>
            <select name="time">
                <option>Now</option>
                <option>Schedule</option>
            </select>
            <button type="submit">See prices</button>
        </form>
    </div>
    <div class="image-section">
        <div id="map"></div>
    </div>
</div>

<div class="about-us">
    <h2>About Us</h2>
    <p>
        Uber is a global platform that connects riders and drivers to make transportation reliable and accessible for everyone.
        Since our founding, we've expanded to hundreds of cities worldwide, empowering millions of people to move freely.
        <br><br>
        Our mission is to ignite opportunity by setting the world in motion. We believe in creating seamless and safe experiences
        for riders, while providing flexible earning opportunities for drivers.
    </p>
</div>

<div class="about-us">
    <h2>About Us</h2>
    <p>
        Uber is a global platform that connects riders and drivers to make transportation reliable and accessible for everyone.
        Since our founding, we've expanded to hundreds of cities worldwide, empowering millions of people to move freely.
        <br><br>
        Our mission is to ignite opportunity by setting the world in motion. We believe in creating seamless and safe experiences
        for riders, while providing flexible earning opportunities for drivers.
    </p>

    <div class="social-icons">
        <a href="">
            <img src="https://upload.wikimedia.org/wikipedia/commons/2/2f/Google_2015_logo.svg" alt="Google Logo" />
        </a>
        <a href="">
            <img src="https://upload.wikimedia.org/wikipedia/commons/0/05/Facebook_Logo_(2019).png" alt="Facebook Logo" />
        </a>
        <a href="">
            <img src="https://upload.wikimedia.org/wikipedia/commons/e/e7/Instagram_logo_2016.svg" alt="Instagram Logo" />
        </a>
        <a href="">
            <img src="https://upload.wikimedia.org/wikipedia/commons/6/6f/Logo_of_Twitter.svg" alt="Twitter Logo" />
        </a>
    </div>
</div>

<script>
    var map = L.map('map').setView([30.0444, 31.2357], 13);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    var pickupMarker, dropoffMarker, routeLine, carMarker;

    function geocode(address) {
        return fetch(https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)})
            .then(res => res.json())
            .then(data => {
                if (data.length > 0) {
                    return [parseFloat(data[0].lat), parseFloat(data[0].lon)];
                }
                return null;
            });
    }

    function getRoute(start, end) {
        return fetch(https://router.project-osrm.org/route/v1/driving/${start[1]},${start[0]};${end[1]},${end[0]}?overview=full&geometries=geojson)
            .then(res => res.json())
            .then(data => {
                let route = data.routes[0];
                let path = route.geometry.coordinates.map(coord => [coord[1], coord[0]]);

                let routeDistance = (route.distance / 1000).toFixed(2);

                let routeDuration = (route.duration / 60).toFixed(1);

                return { path, routeDistance, routeDuration };
            });
    }

    function animateCar(path) {
        let i = 0;
        if (carMarker) {
            map.removeLayer(carMarker);
        }
        carMarker = L.marker(path[0], { icon: L.icon({
            iconUrl: 'https://cdn-icons-png.flaticon.com/512/743/743922.png',
            iconSize: [32, 32]
        }) }).addTo(map);

        function move() {
            if (i < path.length) {
                carMarker.setLatLng(path[i]);
                i++;
                setTimeout(move, 200);
            }
        }
        move();
    }
    let storedDistance = null;
    let storedDuration = null;
    let storedPrice = null;

    document.getElementById('rideForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        var pickupAddress = document.getElementById('pickup').value;
        var dropoffAddress = document.getElementById('dropoff').value;

        var pickupCoords = await geocode(pickupAddress);
        var dropoffCoords = await geocode(dropoffAddress);

        if (!pickupCoords || !dropoffCoords) {
            alert("One of the locations could not be found!");
            return;
        }

        if (pickupMarker) map.removeLayer(pickupMarker);
        if (dropoffMarker) map.removeLayer(dropoffMarker);
        if (routeLine) map.removeLayer(routeLine);

        pickupMarker = L.marker(pickupCoords).addTo(map).bindPopup("Pickup");
        dropoffMarker = L.marker(dropoffCoords).addTo(map).bindPopup("Dropoff");

        var result = await getRoute(pickupCoords, dropoffCoords);

        routeLine = L.polyline(result.path, { color: 'blue', weight: 4 }).addTo(map);
        map.fitBounds(routeLine.getBounds());

        console.log("Distance:", result.routeDistance, "km");
        console.log("Duration:", result.routeDuration, "minutes");

        var price = result.routeDistance * 10;
        console.log("Price:", price, "EGP");

        animateCar(result.path);
    });

    async function tryDrawRoute() {
        if (pickupMarker && dropoffMarker) {
            let pickupCoords = pickupMarker.getLatLng();
            let dropoffCoords = dropoffMarker.getLatLng();

            if (routeLine) map.removeLayer(routeLine);

            let result = await getRoute([pickupCoords.lat, pickupCoords.lng], [dropoffCoords.lat, dropoffCoords.lng]);

            routeLine = L.polyline(result.path, { color: 'blue', weight: 4 }).addTo(map);
            map.fitBounds(routeLine.getBounds());

             storedDistance = result.routeDistance;
             storedDuration = result.routeDuration;
             storedPrice = storedDistance * 10;

             console.log("Distance:", storedDistance, "km");
             console.log("Duration:", storedDuration, "minutes");
             console.log("Price:", storedPrice, "EGP");

            animateCar(result.path);
        }
    }

    document.getElementById('pickup').addEventListener('change', async function() {
        let address = this.value.trim();
        if (address === "") return;

        let coords = await geocode(address);
        if (!coords) {
            alert("Pickup location not found!");
            return;
        }
        if (pickupMarker) map.removeLayer(pickupMarker);
        pickupMarker = L.marker(coords).addTo(map).bindPopup("Pickup");
        map.setView(coords, 13);

        tryDrawRoute();
    });

    document.getElementById('dropoff').addEventListener('change', async function() {
        let address = this.value.trim();
        if (address === "") return;

        let coords = await geocode(address);
        if (!coords) {
            alert("Dropoff location not found!");
            return;
        }
        if (dropoffMarker) map.removeLayer(dropoffMarker);
        dropoffMarker = L.marker(coords).addTo(map).bindPopup("Dropoff");
        map.setView(coords, 13);

        tryDrawRoute();
    });
</script>