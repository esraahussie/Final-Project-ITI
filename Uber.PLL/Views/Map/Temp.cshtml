<div style="margin-bottom:10px;">
    <input id="start-box" type="text" placeholder="Start location" style="width: 300px; padding: 5px;" />
    <input id="dest-box" type="text" placeholder="Destination" style="width: 300px; padding: 5px;" />
</div>
<div id="map" style="height: 500px;"></div>

<p>Distance: <span id="distance">Not calculated</span></p>
<p>Estimated Time: <span id="time">Not calculated</span></p>

<!-- Leaflet core -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<!-- Leaflet Routing Machine -->
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@3.2.0/dist/leaflet-routing-machine.css" />
<script src="https://unpkg.com/leaflet-routing-machine@3.2.0/dist/leaflet-routing-machine.js"></script>

<!-- Leaflet Control Geocoder -->
<link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

<script>
    let map = L.map('map').setView([51.505, -0.09], 13);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    let geocoder = L.Control.Geocoder.nominatim();

    let startMarker = null;
    let destMarker = null;
    let routeControl = null;

    function clearRoute() {
        if (routeControl) {
            map.removeControl(routeControl);
            routeControl = null;
        }
    }

    function setPoint(latlng, isStart) {
        if (isStart) {
            if (startMarker) map.removeLayer(startMarker);
            startMarker = L.marker(latlng).addTo(map).bindPopup('Start').openPopup();
            document.getElementById('start-box').value = latlng.lat.toFixed(5) + ', ' + latlng.lng.toFixed(5);
        } else {
            if (destMarker) map.removeLayer(destMarker);
            destMarker = L.marker(latlng).addTo(map).bindPopup('Destination').openPopup();
            document.getElementById('dest-box').value = latlng.lat.toFixed(5) + ', ' + latlng.lng.toFixed(5);
        }
        tryDrawRoute();
    }

    function handleSearch(boxId, isStart) {
        let query = document.getElementById(boxId).value.trim();
        if (!query) return;

        let coordsMatch = query.match(/^(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)$/);
        if (coordsMatch) {
            let lat = parseFloat(coordsMatch[1]);
            let lng = parseFloat(coordsMatch[3]);
            setPoint(L.latLng(lat, lng), isStart);
            map.setView([lat, lng], 13);
            return;
        }

        geocoder.geocode(query, function(results) {
            if (results && results.length > 0) {
                let latlng = results[0].center;
                setPoint(latlng, isStart);
                map.setView(latlng, 13);
            } else {
                alert('No results found for "' + query + '"');
            }
        });
    }

    document.getElementById('start-box').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') handleSearch('start-box', true);
    });
    document.getElementById('dest-box').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') handleSearch('dest-box', false);
    });

    map.on('click', function(e) {
        if (!startMarker) {
            setPoint(e.latlng, true);
        } else if (!destMarker) {
            setPoint(e.latlng, false);
        } else {
            setPoint(e.latlng, false);
        }
    });

    function tryDrawRoute() {
        clearRoute(); // remove old route before drawing new one

        if (startMarker && destMarker) {
            routeControl = L.Routing.control({
                waypoints: [
                    startMarker.getLatLng(),
                    destMarker.getLatLng()
                ],
                routeWhileDragging: false,
                show: false,
                addWaypoints: false
            }).addTo(map);

            routeControl.on('routesfound', function(e) {
                let route = e.routes[0];
                let distanceKm = route.summary.totalDistance / 1000;
                let timeMin = route.summary.totalTime / 60;
                document.getElementById('distance').textContent = distanceKm.toFixed(2) + ' km';
                document.getElementById('time').textContent = timeMin.toFixed(2) + ' minutes';
            });
        }
    }
        // Ask for current location on load
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            function (position) {
                let lat = position.coords.latitude;
                let lng = position.coords.longitude;
                let userLatLng = L.latLng(lat, lng);

                // Set as starting point if none exists yet
                if (!startMarker) {
                    setPoint(userLatLng, true);
                }

                // Move map view to user location
                map.setView(userLatLng, 13);

                // Optional: small circle to show accuracy range
                L.circle(userLatLng, {
                    radius: position.coords.accuracy,
                    color: 'blue',
                    fillColor: '#3f0',
                    fillOpacity: 0.2
                }).addTo(map).bindPopup("You are here");
            },
            function (error) {
                console.warn("Geolocation error:", error.message);
            }
        );
    } else {
        alert("Geolocation is not supported by your browser.");
    }

</script>
